@page "/DeleteFacturas"
@page "/DeleteFacturas/facturaId={facturaId:int}"
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject FacturasService facturasService
@inject ProductosService productosService
@inject NotificationService notificationService

<PageTitle>Eliminar Venta</PageTitle>
<PageTitle>Detalles de la Venta</PageTitle>

<div class="container mt-4">
    <div class="card shadow-lg p-4">
        <div class="d-flex justify-content-between">
            <div class="card-header">
                <h3><strong>Ventas</strong></h3>
            </div>
            <div>
                <h5><strong>Fecha:</strong> @factura.FechaCreacion.ToShortDateString()</h5>
            </div>
        </div>

        <hr />

        <div class="d-flex justify-content-between">
            <div>
                <h5><strong>Cliente:</strong> @factura.NombreCliente</h5>
            </div>
        </div>

        <hr />

        @if (factura.FacturaDetalle.Count > 0)
        {
            <table class="table table-striped mt-4">
                <thead class="thead-dark">
                    <tr>
                        <th>Producto</th>
                        <th>Cantidad</th>
                        <th>Precio de Venta</th>
                        <th>Descuento</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var detalle in factura.FacturaDetalle)
                    {
                        <tr>
                            <td>@ObtenerNombreProducto(detalle.ProductoId)</td>
                            <td>@detalle.Cantidad</td>
                            <td>@detalle.PrecioVenta.ToString("N2")</td>
                            <td>@detalle.Descuento.ToString("N2")</td>
                            <td>@detalle.SubTotal.ToString("N2")</td>
                        </tr>
                    }
                </tbody>
            </table>

            <div class="row">
                <div class="col text-start">
                    <p><strong>Total de Productos: </strong>@factura.FacturaDetalle.Count</p>
                </div>
            </div>

            <div class="row">
                <div class="col text-end">
                    <h5><strong>Total:</strong> $@factura.FacturaDetalle.Sum(f => f.SubTotal + f.Impuesto).ToString("N2")</h5>
                </div>
            </div>
        }

        <hr />

        <div class="mt-4 d-flex justify-content-end">
            <button type="button" class="btn btn-outline-primary me-2" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Volver</button>
            <button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="bi bi-trash3-fill" /> Eliminar</button>
        </div>
    </div>
</div>
<RadzenNotification />

@code {
    [Parameter]
    public int facturaId { get; set; }
    public Ventas factura { get; set; } = new Ventas();
    public List<Productos> productos = new List<Productos>();

    protected override async Task OnInitializedAsync()
    {
        productos = await productosService.Listar(e => true);
        factura = await facturasService.Buscar(facturaId);
    }

    public async Task Eliminar()
    {
        // Primero eliminamos los detalles asociados al financiamiento
        foreach (var detalle in factura.FacturaDetalle.ToList()) // Evita modificar la colección mientras se itera
        {
            bool detalleEliminado = await facturasService.EliminarDetalle(detalle.VentaDetalleId); // Llamada correcta
            if (!detalleEliminado)
            {
                MostrarNotificacion("Error", "Error al eliminar el detalle de la factura.", NotificationSeverity.Error);
                await Task.Delay(2000);
                return; // Detenemos la ejecución si hay un error
            }
        }

        // Luego eliminamos el financiamiento principal
        bool eliminado = await facturasService.Eliminar(facturaId);

        if (eliminado)
        {
            MostrarNotificacion("Éxito", "Factura eliminada exitosamente.", NotificationSeverity.Success);
            await Task.Delay(2000);
            navigation.NavigateTo("/Ventas");
        }
        else
        {
            MostrarNotificacion("Error", "Error inesperado al eliminar la factura.", NotificationSeverity.Error);
        }

        StateHasChanged();
    }

    public string ObtenerNombreProducto(int id)
    {
        var dato = productos.FirstOrDefault(c => c.ProductoId == id);
        return dato?.Nombre ?? "Producto no encontrado";
    }

    void Volver()
    {
        navigation.NavigateTo("/Ventas");
    }

    void MostrarNotificacion(string titulo, string mensaje, NotificationSeverity severidad)
    {
        var notification = new NotificationMessage
            {
                Severity = severidad,
                Summary = titulo,
                Detail = mensaje,
                Duration = 3000
            };
        notificationService.Notify(notification);
    }
}
