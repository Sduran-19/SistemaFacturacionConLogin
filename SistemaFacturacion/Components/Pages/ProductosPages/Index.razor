@page "/Productos"
@rendermode InteractiveServer
@inject ProductosService productosService
@inject NavigationManager navigation

<PageTitle>Productos</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Productos</strong></h3>
			<button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button>
		</div>
		@*Body*@
		<div class="card-body">
			@if (loading)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info"></div>
				</div>
			}
			else if (productos.Count == 0)
			{
				<h1 class="miMensaje"><i class="bi bi-exclamation-triangle" /> No hay productos creados</h1>
			}
			else
			{
				@*Campos a Filtrar*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option selected disabled>Elije una opci&oacute;n</option>
								<option value="nombre">Nombre</option>
								<option value="descripcion">Descripci&oacute;n</option>
							</InputSelect>
						</div>
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
							</div>
						</div>
						<div class="col-3">
							<button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>Nombre</th>
							<th>Descripci&oacute;n</th>
							<th>Cantidad</th>
							<th>Costo</th>
							<th>Ganancia($)</th>
							<th>Precio de Venta</th>
							<th>Actividades</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var producto in productos.Skip((paginaActual - 1) * productosPorPagina).Take(productosPorPagina))
						{
							<tr>
								<td>@producto.Nombre</td>
								<td>@producto.Descripcion</td>
								<td>@producto.Cantidad</td>
								<td>@producto.Costo.ToString("N2")</td>
								<td>@producto.PorcentajeGanancia</td>
								<td>@producto.PrecioVenta.ToString("N2")</td>
								<td>
									<div class="btn-group" role="group">
										<button type="button" class="btn btn-outline-warning" @onclick="()=> IrAEditar(producto.ProductoId)"><i class="bi bi-pencil-square"></i></button>
										<button type="button" class="btn btn-outline-danger" @onclick="()=> IrAEliminar(producto.ProductoId)"><i class="bi bi-trash3-fill"></i></button>
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>

				@*Paginación*@
				<div class="d-flex justify-content-between">
					<button class="btn btn-primary" @onclick="PaginaAnterior" disabled="@(paginaActual == 1)">Anterior</button>
					<span>Página @paginaActual de @totalPaginas</span>
					<button class="btn btn-primary" @onclick="PaginaSiguiente" disabled="@(paginaActual == totalPaginas)">Siguiente</button>
				</div>
			}
		</div>

		<!-- Footer -->
		<div class="card-footer">
			<p><strong>Total de productos:</strong> @productos.Count</p>
		</div>
	</div>
</div>

@code {
	public List<Productos> productos = new List<Productos>();
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public bool loading { get; set; } = true;
	private int paginaActual = 1;
	private int productosPorPagina = 10;
	private int totalPaginas => (int)Math.Ceiling((double)productos.Count / productosPorPagina);

	protected override async Task OnInitializedAsync()
	{
		productos = await productosService.Listar(e => true);
		loading = false;
	}

	public async Task Buscar()
	{
		productos = await productosService.Listar(e => true);
		if (!string.IsNullOrEmpty(valorFiltro))
		{
			productos = productos.Where(e => (filtro == "nombre" && e.Nombre.Contains(valorFiltro, StringComparison.OrdinalIgnoreCase)) ||
			(filtro == "descripcion" && e.Descripcion.Contains(valorFiltro, StringComparison.OrdinalIgnoreCase))).ToList();
		}
		paginaActual = 1;
	}

	public async Task Restablecer()
	{
		productos = await productosService.Listar(e => true);
	}

	public void IrACrear()
	{
		navigation.NavigateTo("/CreateProductos");
	}



	public void IrAEditar(int id)
	{
		navigation.NavigateTo($"/EditProductos/productoId={id}");
	}

	public void IrAEliminar(int id)
	{
		navigation.NavigateTo($"/DeleteProductos/productoId={id}");
	}

 public void PaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
        }
    }

    public void PaginaSiguiente()
    {
        if (paginaActual < totalPaginas)
        {
            paginaActual++;
        }
    }
}
