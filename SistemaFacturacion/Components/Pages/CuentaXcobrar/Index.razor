@page "/CuentasXcobrar"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject CuentasXcobrarService cuentasXcobrarService
@inject NavigationManager navigation
@attribute [Authorize] // Esto restringe el acceso

<PageTitle>Cuentas por Cobrar</PageTitle>
<div class="container">
    <div class="card shadow-lg">
        <!-- Header -->
        <div class="card-header">
            <h3><strong>Cuentas por Cobrar</strong></h3>
            <button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button>
        </div>
        <!-- Body -->
        <div class="card-body">
            @if (loading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-info"></div>
                </div>
            }
            else if (cuentasXcobrar.Count == 0)
            {
                <h1 class="miMensaje"><i class="bi bi-exclamation-triangle" /> No hay cuentas por cobrar registradas</h1>
            }
            else
            {
                <!-- Filtros -->
                <div class="mb-3">
                    <div class="row align-items-center">
                        <label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
                        <div class="col-3">
                            <InputSelect id="filtro" class="form-select" @bind-Value="filtro">
                                <option selected disabled>Elije una opción</option>
                                <option value="nombre">Nombre</option>
                            </InputSelect>
                        </div>
                        <div class="col-auto miFlecha">
                            <p>→</p>
                        </div>
                        <div class="col-4">
                            <div class="input-group">
                                <InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
                                <button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
                            </div>
                        </div>
                        <div class="col-3">
                            <button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>


                        </div>



                    </div>
                </div>

                <!-- Tabla de Cuentas por Cobrar -->
                <table class="table table-bordered miTabla">
                    <thead>
                        <tr>
                            <th>Fecha</th>
                            <th>Cliente</th>
                            <th>Monto de Venta</th>
                            <th>Dirección</th>
                            <th>Teléfono</th>
                            <th>Email</th>
                            <th>Actividades</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cuenta in cuentasXcobrar)
                        {
                            <tr>
                                <td>@cuenta.FechaCreacion.ToShortDateString()</td>
                                <td>@cuenta.NombreCliente</td>
                                <td>@cuenta.VentasDetalles.Sum(fd => fd.SubTotal + fd.Impuesto).ToString("N2")</td>
                                <td>@cuenta.Direccion</td>
                                <td>@cuenta.Telefono</td>
                                <td>@cuenta.Email</td>

                                <td>
                                    <div class="btn-group" role="group">
                                        <button type="button" class="btn btn-outline-info" @onclick="()=> IrADetalles(cuenta.CuentasXcobrarId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Ver detalles">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-warning" @onclick="()=> IrAEditar(cuenta.CuentasXcobrarId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Editar">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button type="button" class="btn btn-outline-danger" @onclick="()=> IrAEliminar(cuenta.CuentasXcobrarId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Eliminar">
                                            <i class="bi bi-trash3-fill"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                @*Paginación*@
                <div class="d-flex justify-content-between">
                    <button class="btn btn-primary" @onclick="PaginaAnterior" disabled="@(paginaActual == 1)">Anterior</button>
                    <span>Página @paginaActual de @totalPaginas</span>
                    <button class="btn btn-primary" @onclick="PaginaSiguiente" disabled="@(paginaActual == totalPaginas)">Siguiente</button>
                </div>
            }
        </div>


            <!-- Footer -->
            <div class="card-footer">
                <p><strong>Total de Cuentas por Cobrar:</strong> @cuentasXcobrar.Count</p>
                <p><strong>Total de Ventas:</strong> @TotalVentas.ToString("N2")</p>
            </div>

    </div>
</div>


@code {
    public List<CuentasXcobrar> cuentasXcobrar = new List<CuentasXcobrar>();
    public string filtro { get; set; }
    public string valorFiltro { get; set; }
    public string mensaje { get; set; }
    public bool loading { get; set; } = true;
    public decimal TotalVentas { get; set; }
    private int paginaActual = 1;
    private int productosPorPagina = 10;
    private int totalPaginas => (int)Math.Ceiling((double)cuentasXcobrar.Count / productosPorPagina);

    protected override async Task OnInitializedAsync()
    {
        cuentasXcobrar = await cuentasXcobrarService.Listar(e => true);
        TotalVentas = cuentasXcobrar.Sum(f => f.VentasDetalles.Sum(fd => fd.SubTotal - (fd.SubTotal * (fd.Descuento / 100)) + fd.Impuesto));
        loading = false;

        if (cuentasXcobrar.Count == 0)
            StateHasChanged();
    }

    public async Task Buscar()
    {
        List<CuentasXcobrar> resultado = new List<CuentasXcobrar>();

        var cuentasList = await cuentasXcobrarService.Listar(e => true);

        switch (filtro)
        {
            case "nombre":
                resultado = cuentasList.Where(e =>
                    e.NombreCliente.Contains(valorFiltro, StringComparison.OrdinalIgnoreCase)).ToList();
                break;
        }

        if (resultado == null || resultado.Count == 0)
            mensaje = "No se encontraron cuentas por cobrar con el filtro especificado.";
        else
        {
            cuentasXcobrar = resultado;
            mensaje = string.Empty;
        }

        TotalVentas = cuentasXcobrar.Sum(f => f.VentasDetalles.Sum(fd => fd.SubTotal - (fd.SubTotal * (fd.Descuento / 100)) + fd.Impuesto));
        StateHasChanged();
    }

    public void PaginaAnterior()
    {
        if (paginaActual > 1)
        {
            paginaActual--;
        }
    }

    public void PaginaSiguiente()
    {
        if (paginaActual < totalPaginas)
        {
            paginaActual++;
        }
    }

    public async Task Restablecer()
    {
        TotalVentas = cuentasXcobrar.Sum(f => f.VentasDetalles.Sum(fd => fd.SubTotal - (fd.SubTotal * (fd.Descuento / 100)) + fd.Impuesto));
        cuentasXcobrar = await cuentasXcobrarService.Listar(e => true);
    }

    public void IrACrear()
    {
        navigation.NavigateTo("/CreateCuentasXcobrar");
    }

    public void IrADetalles(int id)
    {
        navigation.NavigateTo($"/ViewCuentasXcobrar/cuentasXcobrarId={id}");
    }

    public void IrAEditar(int id)
    {
        navigation.NavigateTo($"/EditCuentasXcobrar/cuentasXcobrarId={id}");
    }

    public void IrAEliminar(int id)
    {
        navigation.NavigateTo($"/DeleteCuentasXcobrar/cuentasXcobrarId={id}");
    }
}
